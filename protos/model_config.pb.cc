// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model_config.proto

#include "model_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr ModelConfig::ModelConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct ModelConfigDefaultTypeInternal {
  constexpr ModelConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModelConfigDefaultTypeInternal() {}
  union {
    ModelConfig _instance;
  };
};
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_NO_DESTROY ModelConfigDefaultTypeInternal _ModelConfig_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_model_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_model_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_model_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_model_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ModelConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ModelConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::ModelConfig, config_),
  PROTOBUF_FIELD_OFFSET(::ModelConfig, weight_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ModelConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ModelConfig_default_instance_),
};

const char descriptor_table_protodef_model_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022model_config.proto\"\263\001\n\013ModelConfig\022\024\n\n"
  "caffeProto\030\001 \001(\tH\000\022\024\n\ndarknetCfg\030\002 \001(\tH\000"
  "\022\031\n\017tensorflowPbtxt\030\003 \001(\tH\000\022\024\n\ncaffeMode"
  "l\030\004 \001(\tH\001\022\027\n\rdarknetWeight\030\005 \001(\tH\001\022\032\n\020te"
  "nsorflowFrozen\030\006 \001(\tH\001B\010\n\006configB\010\n\006weig"
  "htb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_model_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_model_5fconfig_2eproto = {
  false, false, 210, descriptor_table_protodef_model_5fconfig_2eproto, "model_config.proto", 
  &descriptor_table_model_5fconfig_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_model_5fconfig_2eproto::offsets,
  file_level_metadata_model_5fconfig_2eproto, file_level_enum_descriptors_model_5fconfig_2eproto, file_level_service_descriptors_model_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_model_5fconfig_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_model_5fconfig_2eproto);
  return descriptor_table_model_5fconfig_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_model_5fconfig_2eproto(&descriptor_table_model_5fconfig_2eproto);

// ===================================================================

class ModelConfig::_Internal {
 public:
};

ModelConfig::ModelConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ModelConfig)
}
ModelConfig::ModelConfig(const ModelConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_config();
  switch (from.config_case()) {
    case kCaffeProto: {
      _internal_set_caffeproto(from._internal_caffeproto());
      break;
    }
    case kDarknetCfg: {
      _internal_set_darknetcfg(from._internal_darknetcfg());
      break;
    }
    case kTensorflowPbtxt: {
      _internal_set_tensorflowpbtxt(from._internal_tensorflowpbtxt());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  clear_has_weight();
  switch (from.weight_case()) {
    case kCaffeModel: {
      _internal_set_caffemodel(from._internal_caffemodel());
      break;
    }
    case kDarknetWeight: {
      _internal_set_darknetweight(from._internal_darknetweight());
      break;
    }
    case kTensorflowFrozen: {
      _internal_set_tensorflowfrozen(from._internal_tensorflowfrozen());
      break;
    }
    case WEIGHT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ModelConfig)
}

void ModelConfig::SharedCtor() {
clear_has_config();
clear_has_weight();
}

ModelConfig::~ModelConfig() {
  // @@protoc_insertion_point(destructor:ModelConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ModelConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_config()) {
    clear_config();
  }
  if (has_weight()) {
    clear_weight();
  }
}

void ModelConfig::ArenaDtor(void* object) {
  ModelConfig* _this = reinterpret_cast< ModelConfig* >(object);
  (void)_this;
}
void ModelConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModelConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModelConfig::clear_config() {
// @@protoc_insertion_point(one_of_clear_start:ModelConfig)
  switch (config_case()) {
    case kCaffeProto: {
      config_.caffeproto_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kDarknetCfg: {
      config_.darknetcfg_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kTensorflowPbtxt: {
      config_.tensorflowpbtxt_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONFIG_NOT_SET;
}

void ModelConfig::clear_weight() {
// @@protoc_insertion_point(one_of_clear_start:ModelConfig)
  switch (weight_case()) {
    case kCaffeModel: {
      weight_.caffemodel_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kDarknetWeight: {
      weight_.darknetweight_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kTensorflowFrozen: {
      weight_.tensorflowfrozen_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case WEIGHT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = WEIGHT_NOT_SET;
}


void ModelConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ModelConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_config();
  clear_weight();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModelConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string caffeProto = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_caffeproto();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModelConfig.caffeProto"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string darknetCfg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_darknetcfg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModelConfig.darknetCfg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tensorflowPbtxt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_tensorflowpbtxt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModelConfig.tensorflowPbtxt"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string caffeModel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_caffemodel();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModelConfig.caffeModel"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string darknetWeight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_darknetweight();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModelConfig.darknetWeight"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tensorflowFrozen = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_tensorflowfrozen();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ModelConfig.tensorflowFrozen"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModelConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ModelConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string caffeProto = 1;
  if (_internal_has_caffeproto()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_caffeproto().data(), static_cast<int>(this->_internal_caffeproto().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModelConfig.caffeProto");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_caffeproto(), target);
  }

  // string darknetCfg = 2;
  if (_internal_has_darknetcfg()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_darknetcfg().data(), static_cast<int>(this->_internal_darknetcfg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModelConfig.darknetCfg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_darknetcfg(), target);
  }

  // string tensorflowPbtxt = 3;
  if (_internal_has_tensorflowpbtxt()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tensorflowpbtxt().data(), static_cast<int>(this->_internal_tensorflowpbtxt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModelConfig.tensorflowPbtxt");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tensorflowpbtxt(), target);
  }

  // string caffeModel = 4;
  if (_internal_has_caffemodel()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_caffemodel().data(), static_cast<int>(this->_internal_caffemodel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModelConfig.caffeModel");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_caffemodel(), target);
  }

  // string darknetWeight = 5;
  if (_internal_has_darknetweight()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_darknetweight().data(), static_cast<int>(this->_internal_darknetweight().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModelConfig.darknetWeight");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_darknetweight(), target);
  }

  // string tensorflowFrozen = 6;
  if (_internal_has_tensorflowfrozen()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tensorflowfrozen().data(), static_cast<int>(this->_internal_tensorflowfrozen().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ModelConfig.tensorflowFrozen");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_tensorflowfrozen(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ModelConfig)
  return target;
}

size_t ModelConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ModelConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (config_case()) {
    // string caffeProto = 1;
    case kCaffeProto: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caffeproto());
      break;
    }
    // string darknetCfg = 2;
    case kDarknetCfg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_darknetcfg());
      break;
    }
    // string tensorflowPbtxt = 3;
    case kTensorflowPbtxt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tensorflowpbtxt());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  switch (weight_case()) {
    // string caffeModel = 4;
    case kCaffeModel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_caffemodel());
      break;
    }
    // string darknetWeight = 5;
    case kDarknetWeight: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_darknetweight());
      break;
    }
    // string tensorflowFrozen = 6;
    case kTensorflowFrozen: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tensorflowfrozen());
      break;
    }
    case WEIGHT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModelConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ModelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ModelConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModelConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ModelConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ModelConfig)
    MergeFrom(*source);
  }
}

void ModelConfig::MergeFrom(const ModelConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ModelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.config_case()) {
    case kCaffeProto: {
      _internal_set_caffeproto(from._internal_caffeproto());
      break;
    }
    case kDarknetCfg: {
      _internal_set_darknetcfg(from._internal_darknetcfg());
      break;
    }
    case kTensorflowPbtxt: {
      _internal_set_tensorflowpbtxt(from._internal_tensorflowpbtxt());
      break;
    }
    case CONFIG_NOT_SET: {
      break;
    }
  }
  switch (from.weight_case()) {
    case kCaffeModel: {
      _internal_set_caffemodel(from._internal_caffemodel());
      break;
    }
    case kDarknetWeight: {
      _internal_set_darknetweight(from._internal_darknetweight());
      break;
    }
    case kTensorflowFrozen: {
      _internal_set_tensorflowfrozen(from._internal_tensorflowfrozen());
      break;
    }
    case WEIGHT_NOT_SET: {
      break;
    }
  }
}

void ModelConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ModelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelConfig::CopyFrom(const ModelConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ModelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelConfig::IsInitialized() const {
  return true;
}

void ModelConfig::InternalSwap(ModelConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(config_, other->config_);
  swap(weight_, other->weight_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModelConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ModelConfig* Arena::CreateMaybeMessage< ::ModelConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ModelConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
