// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_model_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_model_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_model_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_model_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_model_5fconfig_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_model_5fconfig_2eproto_metadata_getter(int index);
class ModelConfig;
struct ModelConfigDefaultTypeInternal;
extern ModelConfigDefaultTypeInternal _ModelConfig_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ModelConfig* Arena::CreateMaybeMessage<::ModelConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ModelConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ModelConfig) */ {
 public:
  inline ModelConfig() : ModelConfig(nullptr) {}
  virtual ~ModelConfig();
  explicit constexpr ModelConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelConfig(const ModelConfig& from);
  ModelConfig(ModelConfig&& from) noexcept
    : ModelConfig() {
    *this = ::std::move(from);
  }

  inline ModelConfig& operator=(const ModelConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelConfig& operator=(ModelConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModelConfig& default_instance() {
    return *internal_default_instance();
  }
  enum ConfigCase {
    kCaffeProto = 1,
    kDarknetCfg = 2,
    kTensorflowPbtxt = 3,
    CONFIG_NOT_SET = 0,
  };

  enum WeightCase {
    kCaffeModel = 4,
    kDarknetWeight = 5,
    kTensorflowFrozen = 6,
    WEIGHT_NOT_SET = 0,
  };

  static inline const ModelConfig* internal_default_instance() {
    return reinterpret_cast<const ModelConfig*>(
               &_ModelConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ModelConfig& a, ModelConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModelConfig* New() const final {
    return CreateMaybeMessage<ModelConfig>(nullptr);
  }

  ModelConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModelConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModelConfig& from);
  void MergeFrom(const ModelConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ModelConfig";
  }
  protected:
  explicit ModelConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_model_5fconfig_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaffeProtoFieldNumber = 1,
    kDarknetCfgFieldNumber = 2,
    kTensorflowPbtxtFieldNumber = 3,
    kCaffeModelFieldNumber = 4,
    kDarknetWeightFieldNumber = 5,
    kTensorflowFrozenFieldNumber = 6,
  };
  // string caffeProto = 1;
  bool has_caffeproto() const;
  private:
  bool _internal_has_caffeproto() const;
  public:
  void clear_caffeproto();
  const std::string& caffeproto() const;
  void set_caffeproto(const std::string& value);
  void set_caffeproto(std::string&& value);
  void set_caffeproto(const char* value);
  void set_caffeproto(const char* value, size_t size);
  std::string* mutable_caffeproto();
  std::string* release_caffeproto();
  void set_allocated_caffeproto(std::string* caffeproto);
  private:
  const std::string& _internal_caffeproto() const;
  void _internal_set_caffeproto(const std::string& value);
  std::string* _internal_mutable_caffeproto();
  public:

  // string darknetCfg = 2;
  bool has_darknetcfg() const;
  private:
  bool _internal_has_darknetcfg() const;
  public:
  void clear_darknetcfg();
  const std::string& darknetcfg() const;
  void set_darknetcfg(const std::string& value);
  void set_darknetcfg(std::string&& value);
  void set_darknetcfg(const char* value);
  void set_darknetcfg(const char* value, size_t size);
  std::string* mutable_darknetcfg();
  std::string* release_darknetcfg();
  void set_allocated_darknetcfg(std::string* darknetcfg);
  private:
  const std::string& _internal_darknetcfg() const;
  void _internal_set_darknetcfg(const std::string& value);
  std::string* _internal_mutable_darknetcfg();
  public:

  // string tensorflowPbtxt = 3;
  bool has_tensorflowpbtxt() const;
  private:
  bool _internal_has_tensorflowpbtxt() const;
  public:
  void clear_tensorflowpbtxt();
  const std::string& tensorflowpbtxt() const;
  void set_tensorflowpbtxt(const std::string& value);
  void set_tensorflowpbtxt(std::string&& value);
  void set_tensorflowpbtxt(const char* value);
  void set_tensorflowpbtxt(const char* value, size_t size);
  std::string* mutable_tensorflowpbtxt();
  std::string* release_tensorflowpbtxt();
  void set_allocated_tensorflowpbtxt(std::string* tensorflowpbtxt);
  private:
  const std::string& _internal_tensorflowpbtxt() const;
  void _internal_set_tensorflowpbtxt(const std::string& value);
  std::string* _internal_mutable_tensorflowpbtxt();
  public:

  // string caffeModel = 4;
  bool has_caffemodel() const;
  private:
  bool _internal_has_caffemodel() const;
  public:
  void clear_caffemodel();
  const std::string& caffemodel() const;
  void set_caffemodel(const std::string& value);
  void set_caffemodel(std::string&& value);
  void set_caffemodel(const char* value);
  void set_caffemodel(const char* value, size_t size);
  std::string* mutable_caffemodel();
  std::string* release_caffemodel();
  void set_allocated_caffemodel(std::string* caffemodel);
  private:
  const std::string& _internal_caffemodel() const;
  void _internal_set_caffemodel(const std::string& value);
  std::string* _internal_mutable_caffemodel();
  public:

  // string darknetWeight = 5;
  bool has_darknetweight() const;
  private:
  bool _internal_has_darknetweight() const;
  public:
  void clear_darknetweight();
  const std::string& darknetweight() const;
  void set_darknetweight(const std::string& value);
  void set_darknetweight(std::string&& value);
  void set_darknetweight(const char* value);
  void set_darknetweight(const char* value, size_t size);
  std::string* mutable_darknetweight();
  std::string* release_darknetweight();
  void set_allocated_darknetweight(std::string* darknetweight);
  private:
  const std::string& _internal_darknetweight() const;
  void _internal_set_darknetweight(const std::string& value);
  std::string* _internal_mutable_darknetweight();
  public:

  // string tensorflowFrozen = 6;
  bool has_tensorflowfrozen() const;
  private:
  bool _internal_has_tensorflowfrozen() const;
  public:
  void clear_tensorflowfrozen();
  const std::string& tensorflowfrozen() const;
  void set_tensorflowfrozen(const std::string& value);
  void set_tensorflowfrozen(std::string&& value);
  void set_tensorflowfrozen(const char* value);
  void set_tensorflowfrozen(const char* value, size_t size);
  std::string* mutable_tensorflowfrozen();
  std::string* release_tensorflowfrozen();
  void set_allocated_tensorflowfrozen(std::string* tensorflowfrozen);
  private:
  const std::string& _internal_tensorflowfrozen() const;
  void _internal_set_tensorflowfrozen(const std::string& value);
  std::string* _internal_mutable_tensorflowfrozen();
  public:

  void clear_config();
  ConfigCase config_case() const;
  void clear_weight();
  WeightCase weight_case() const;
  // @@protoc_insertion_point(class_scope:ModelConfig)
 private:
  class _Internal;
  void set_has_caffeproto();
  void set_has_darknetcfg();
  void set_has_tensorflowpbtxt();
  void set_has_caffemodel();
  void set_has_darknetweight();
  void set_has_tensorflowfrozen();

  inline bool has_config() const;
  inline void clear_has_config();

  inline bool has_weight() const;
  inline void clear_has_weight();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ConfigUnion {
    constexpr ConfigUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caffeproto_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr darknetcfg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tensorflowpbtxt_;
  } config_;
  union WeightUnion {
    constexpr WeightUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr caffemodel_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr darknetweight_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tensorflowfrozen_;
  } weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_model_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ModelConfig

// string caffeProto = 1;
inline bool ModelConfig::_internal_has_caffeproto() const {
  return config_case() == kCaffeProto;
}
inline bool ModelConfig::has_caffeproto() const {
  return _internal_has_caffeproto();
}
inline void ModelConfig::set_has_caffeproto() {
  _oneof_case_[0] = kCaffeProto;
}
inline void ModelConfig::clear_caffeproto() {
  if (_internal_has_caffeproto()) {
    config_.caffeproto_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_config();
  }
}
inline const std::string& ModelConfig::caffeproto() const {
  // @@protoc_insertion_point(field_get:ModelConfig.caffeProto)
  return _internal_caffeproto();
}
inline void ModelConfig::set_caffeproto(const std::string& value) {
  _internal_set_caffeproto(value);
  // @@protoc_insertion_point(field_set:ModelConfig.caffeProto)
}
inline std::string* ModelConfig::mutable_caffeproto() {
  // @@protoc_insertion_point(field_mutable:ModelConfig.caffeProto)
  return _internal_mutable_caffeproto();
}
inline const std::string& ModelConfig::_internal_caffeproto() const {
  if (_internal_has_caffeproto()) {
    return config_.caffeproto_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ModelConfig::_internal_set_caffeproto(const std::string& value) {
  if (!_internal_has_caffeproto()) {
    clear_config();
    set_has_caffeproto();
    config_.caffeproto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  config_.caffeproto_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ModelConfig::set_caffeproto(std::string&& value) {
  // @@protoc_insertion_point(field_set:ModelConfig.caffeProto)
  if (!_internal_has_caffeproto()) {
    clear_config();
    set_has_caffeproto();
    config_.caffeproto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  config_.caffeproto_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ModelConfig.caffeProto)
}
inline void ModelConfig::set_caffeproto(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_caffeproto()) {
    clear_config();
    set_has_caffeproto();
    config_.caffeproto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  config_.caffeproto_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ModelConfig.caffeProto)
}
inline void ModelConfig::set_caffeproto(const char* value,
                             size_t size) {
  if (!_internal_has_caffeproto()) {
    clear_config();
    set_has_caffeproto();
    config_.caffeproto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  config_.caffeproto_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:ModelConfig.caffeProto)
}
inline std::string* ModelConfig::_internal_mutable_caffeproto() {
  if (!_internal_has_caffeproto()) {
    clear_config();
    set_has_caffeproto();
    config_.caffeproto_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return config_.caffeproto_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ModelConfig::release_caffeproto() {
  // @@protoc_insertion_point(field_release:ModelConfig.caffeProto)
  if (_internal_has_caffeproto()) {
    clear_has_config();
    return config_.caffeproto_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ModelConfig::set_allocated_caffeproto(std::string* caffeproto) {
  if (has_config()) {
    clear_config();
  }
  if (caffeproto != nullptr) {
    set_has_caffeproto();
    config_.caffeproto_.UnsafeSetDefault(caffeproto);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(caffeproto);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:ModelConfig.caffeProto)
}

// string darknetCfg = 2;
inline bool ModelConfig::_internal_has_darknetcfg() const {
  return config_case() == kDarknetCfg;
}
inline bool ModelConfig::has_darknetcfg() const {
  return _internal_has_darknetcfg();
}
inline void ModelConfig::set_has_darknetcfg() {
  _oneof_case_[0] = kDarknetCfg;
}
inline void ModelConfig::clear_darknetcfg() {
  if (_internal_has_darknetcfg()) {
    config_.darknetcfg_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_config();
  }
}
inline const std::string& ModelConfig::darknetcfg() const {
  // @@protoc_insertion_point(field_get:ModelConfig.darknetCfg)
  return _internal_darknetcfg();
}
inline void ModelConfig::set_darknetcfg(const std::string& value) {
  _internal_set_darknetcfg(value);
  // @@protoc_insertion_point(field_set:ModelConfig.darknetCfg)
}
inline std::string* ModelConfig::mutable_darknetcfg() {
  // @@protoc_insertion_point(field_mutable:ModelConfig.darknetCfg)
  return _internal_mutable_darknetcfg();
}
inline const std::string& ModelConfig::_internal_darknetcfg() const {
  if (_internal_has_darknetcfg()) {
    return config_.darknetcfg_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ModelConfig::_internal_set_darknetcfg(const std::string& value) {
  if (!_internal_has_darknetcfg()) {
    clear_config();
    set_has_darknetcfg();
    config_.darknetcfg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  config_.darknetcfg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ModelConfig::set_darknetcfg(std::string&& value) {
  // @@protoc_insertion_point(field_set:ModelConfig.darknetCfg)
  if (!_internal_has_darknetcfg()) {
    clear_config();
    set_has_darknetcfg();
    config_.darknetcfg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  config_.darknetcfg_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ModelConfig.darknetCfg)
}
inline void ModelConfig::set_darknetcfg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_darknetcfg()) {
    clear_config();
    set_has_darknetcfg();
    config_.darknetcfg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  config_.darknetcfg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ModelConfig.darknetCfg)
}
inline void ModelConfig::set_darknetcfg(const char* value,
                             size_t size) {
  if (!_internal_has_darknetcfg()) {
    clear_config();
    set_has_darknetcfg();
    config_.darknetcfg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  config_.darknetcfg_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:ModelConfig.darknetCfg)
}
inline std::string* ModelConfig::_internal_mutable_darknetcfg() {
  if (!_internal_has_darknetcfg()) {
    clear_config();
    set_has_darknetcfg();
    config_.darknetcfg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return config_.darknetcfg_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ModelConfig::release_darknetcfg() {
  // @@protoc_insertion_point(field_release:ModelConfig.darknetCfg)
  if (_internal_has_darknetcfg()) {
    clear_has_config();
    return config_.darknetcfg_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ModelConfig::set_allocated_darknetcfg(std::string* darknetcfg) {
  if (has_config()) {
    clear_config();
  }
  if (darknetcfg != nullptr) {
    set_has_darknetcfg();
    config_.darknetcfg_.UnsafeSetDefault(darknetcfg);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(darknetcfg);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:ModelConfig.darknetCfg)
}

// string tensorflowPbtxt = 3;
inline bool ModelConfig::_internal_has_tensorflowpbtxt() const {
  return config_case() == kTensorflowPbtxt;
}
inline bool ModelConfig::has_tensorflowpbtxt() const {
  return _internal_has_tensorflowpbtxt();
}
inline void ModelConfig::set_has_tensorflowpbtxt() {
  _oneof_case_[0] = kTensorflowPbtxt;
}
inline void ModelConfig::clear_tensorflowpbtxt() {
  if (_internal_has_tensorflowpbtxt()) {
    config_.tensorflowpbtxt_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_config();
  }
}
inline const std::string& ModelConfig::tensorflowpbtxt() const {
  // @@protoc_insertion_point(field_get:ModelConfig.tensorflowPbtxt)
  return _internal_tensorflowpbtxt();
}
inline void ModelConfig::set_tensorflowpbtxt(const std::string& value) {
  _internal_set_tensorflowpbtxt(value);
  // @@protoc_insertion_point(field_set:ModelConfig.tensorflowPbtxt)
}
inline std::string* ModelConfig::mutable_tensorflowpbtxt() {
  // @@protoc_insertion_point(field_mutable:ModelConfig.tensorflowPbtxt)
  return _internal_mutable_tensorflowpbtxt();
}
inline const std::string& ModelConfig::_internal_tensorflowpbtxt() const {
  if (_internal_has_tensorflowpbtxt()) {
    return config_.tensorflowpbtxt_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ModelConfig::_internal_set_tensorflowpbtxt(const std::string& value) {
  if (!_internal_has_tensorflowpbtxt()) {
    clear_config();
    set_has_tensorflowpbtxt();
    config_.tensorflowpbtxt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  config_.tensorflowpbtxt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ModelConfig::set_tensorflowpbtxt(std::string&& value) {
  // @@protoc_insertion_point(field_set:ModelConfig.tensorflowPbtxt)
  if (!_internal_has_tensorflowpbtxt()) {
    clear_config();
    set_has_tensorflowpbtxt();
    config_.tensorflowpbtxt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  config_.tensorflowpbtxt_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ModelConfig.tensorflowPbtxt)
}
inline void ModelConfig::set_tensorflowpbtxt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_tensorflowpbtxt()) {
    clear_config();
    set_has_tensorflowpbtxt();
    config_.tensorflowpbtxt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  config_.tensorflowpbtxt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ModelConfig.tensorflowPbtxt)
}
inline void ModelConfig::set_tensorflowpbtxt(const char* value,
                             size_t size) {
  if (!_internal_has_tensorflowpbtxt()) {
    clear_config();
    set_has_tensorflowpbtxt();
    config_.tensorflowpbtxt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  config_.tensorflowpbtxt_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:ModelConfig.tensorflowPbtxt)
}
inline std::string* ModelConfig::_internal_mutable_tensorflowpbtxt() {
  if (!_internal_has_tensorflowpbtxt()) {
    clear_config();
    set_has_tensorflowpbtxt();
    config_.tensorflowpbtxt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return config_.tensorflowpbtxt_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ModelConfig::release_tensorflowpbtxt() {
  // @@protoc_insertion_point(field_release:ModelConfig.tensorflowPbtxt)
  if (_internal_has_tensorflowpbtxt()) {
    clear_has_config();
    return config_.tensorflowpbtxt_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ModelConfig::set_allocated_tensorflowpbtxt(std::string* tensorflowpbtxt) {
  if (has_config()) {
    clear_config();
  }
  if (tensorflowpbtxt != nullptr) {
    set_has_tensorflowpbtxt();
    config_.tensorflowpbtxt_.UnsafeSetDefault(tensorflowpbtxt);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(tensorflowpbtxt);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:ModelConfig.tensorflowPbtxt)
}

// string caffeModel = 4;
inline bool ModelConfig::_internal_has_caffemodel() const {
  return weight_case() == kCaffeModel;
}
inline bool ModelConfig::has_caffemodel() const {
  return _internal_has_caffemodel();
}
inline void ModelConfig::set_has_caffemodel() {
  _oneof_case_[1] = kCaffeModel;
}
inline void ModelConfig::clear_caffemodel() {
  if (_internal_has_caffemodel()) {
    weight_.caffemodel_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_weight();
  }
}
inline const std::string& ModelConfig::caffemodel() const {
  // @@protoc_insertion_point(field_get:ModelConfig.caffeModel)
  return _internal_caffemodel();
}
inline void ModelConfig::set_caffemodel(const std::string& value) {
  _internal_set_caffemodel(value);
  // @@protoc_insertion_point(field_set:ModelConfig.caffeModel)
}
inline std::string* ModelConfig::mutable_caffemodel() {
  // @@protoc_insertion_point(field_mutable:ModelConfig.caffeModel)
  return _internal_mutable_caffemodel();
}
inline const std::string& ModelConfig::_internal_caffemodel() const {
  if (_internal_has_caffemodel()) {
    return weight_.caffemodel_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ModelConfig::_internal_set_caffemodel(const std::string& value) {
  if (!_internal_has_caffemodel()) {
    clear_weight();
    set_has_caffemodel();
    weight_.caffemodel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  weight_.caffemodel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ModelConfig::set_caffemodel(std::string&& value) {
  // @@protoc_insertion_point(field_set:ModelConfig.caffeModel)
  if (!_internal_has_caffemodel()) {
    clear_weight();
    set_has_caffemodel();
    weight_.caffemodel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  weight_.caffemodel_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ModelConfig.caffeModel)
}
inline void ModelConfig::set_caffemodel(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_caffemodel()) {
    clear_weight();
    set_has_caffemodel();
    weight_.caffemodel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  weight_.caffemodel_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ModelConfig.caffeModel)
}
inline void ModelConfig::set_caffemodel(const char* value,
                             size_t size) {
  if (!_internal_has_caffemodel()) {
    clear_weight();
    set_has_caffemodel();
    weight_.caffemodel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  weight_.caffemodel_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:ModelConfig.caffeModel)
}
inline std::string* ModelConfig::_internal_mutable_caffemodel() {
  if (!_internal_has_caffemodel()) {
    clear_weight();
    set_has_caffemodel();
    weight_.caffemodel_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return weight_.caffemodel_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ModelConfig::release_caffemodel() {
  // @@protoc_insertion_point(field_release:ModelConfig.caffeModel)
  if (_internal_has_caffemodel()) {
    clear_has_weight();
    return weight_.caffemodel_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ModelConfig::set_allocated_caffemodel(std::string* caffemodel) {
  if (has_weight()) {
    clear_weight();
  }
  if (caffemodel != nullptr) {
    set_has_caffemodel();
    weight_.caffemodel_.UnsafeSetDefault(caffemodel);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(caffemodel);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:ModelConfig.caffeModel)
}

// string darknetWeight = 5;
inline bool ModelConfig::_internal_has_darknetweight() const {
  return weight_case() == kDarknetWeight;
}
inline bool ModelConfig::has_darknetweight() const {
  return _internal_has_darknetweight();
}
inline void ModelConfig::set_has_darknetweight() {
  _oneof_case_[1] = kDarknetWeight;
}
inline void ModelConfig::clear_darknetweight() {
  if (_internal_has_darknetweight()) {
    weight_.darknetweight_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_weight();
  }
}
inline const std::string& ModelConfig::darknetweight() const {
  // @@protoc_insertion_point(field_get:ModelConfig.darknetWeight)
  return _internal_darknetweight();
}
inline void ModelConfig::set_darknetweight(const std::string& value) {
  _internal_set_darknetweight(value);
  // @@protoc_insertion_point(field_set:ModelConfig.darknetWeight)
}
inline std::string* ModelConfig::mutable_darknetweight() {
  // @@protoc_insertion_point(field_mutable:ModelConfig.darknetWeight)
  return _internal_mutable_darknetweight();
}
inline const std::string& ModelConfig::_internal_darknetweight() const {
  if (_internal_has_darknetweight()) {
    return weight_.darknetweight_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ModelConfig::_internal_set_darknetweight(const std::string& value) {
  if (!_internal_has_darknetweight()) {
    clear_weight();
    set_has_darknetweight();
    weight_.darknetweight_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  weight_.darknetweight_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ModelConfig::set_darknetweight(std::string&& value) {
  // @@protoc_insertion_point(field_set:ModelConfig.darknetWeight)
  if (!_internal_has_darknetweight()) {
    clear_weight();
    set_has_darknetweight();
    weight_.darknetweight_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  weight_.darknetweight_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ModelConfig.darknetWeight)
}
inline void ModelConfig::set_darknetweight(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_darknetweight()) {
    clear_weight();
    set_has_darknetweight();
    weight_.darknetweight_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  weight_.darknetweight_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ModelConfig.darknetWeight)
}
inline void ModelConfig::set_darknetweight(const char* value,
                             size_t size) {
  if (!_internal_has_darknetweight()) {
    clear_weight();
    set_has_darknetweight();
    weight_.darknetweight_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  weight_.darknetweight_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:ModelConfig.darknetWeight)
}
inline std::string* ModelConfig::_internal_mutable_darknetweight() {
  if (!_internal_has_darknetweight()) {
    clear_weight();
    set_has_darknetweight();
    weight_.darknetweight_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return weight_.darknetweight_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ModelConfig::release_darknetweight() {
  // @@protoc_insertion_point(field_release:ModelConfig.darknetWeight)
  if (_internal_has_darknetweight()) {
    clear_has_weight();
    return weight_.darknetweight_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ModelConfig::set_allocated_darknetweight(std::string* darknetweight) {
  if (has_weight()) {
    clear_weight();
  }
  if (darknetweight != nullptr) {
    set_has_darknetweight();
    weight_.darknetweight_.UnsafeSetDefault(darknetweight);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(darknetweight);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:ModelConfig.darknetWeight)
}

// string tensorflowFrozen = 6;
inline bool ModelConfig::_internal_has_tensorflowfrozen() const {
  return weight_case() == kTensorflowFrozen;
}
inline bool ModelConfig::has_tensorflowfrozen() const {
  return _internal_has_tensorflowfrozen();
}
inline void ModelConfig::set_has_tensorflowfrozen() {
  _oneof_case_[1] = kTensorflowFrozen;
}
inline void ModelConfig::clear_tensorflowfrozen() {
  if (_internal_has_tensorflowfrozen()) {
    weight_.tensorflowfrozen_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_weight();
  }
}
inline const std::string& ModelConfig::tensorflowfrozen() const {
  // @@protoc_insertion_point(field_get:ModelConfig.tensorflowFrozen)
  return _internal_tensorflowfrozen();
}
inline void ModelConfig::set_tensorflowfrozen(const std::string& value) {
  _internal_set_tensorflowfrozen(value);
  // @@protoc_insertion_point(field_set:ModelConfig.tensorflowFrozen)
}
inline std::string* ModelConfig::mutable_tensorflowfrozen() {
  // @@protoc_insertion_point(field_mutable:ModelConfig.tensorflowFrozen)
  return _internal_mutable_tensorflowfrozen();
}
inline const std::string& ModelConfig::_internal_tensorflowfrozen() const {
  if (_internal_has_tensorflowfrozen()) {
    return weight_.tensorflowfrozen_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ModelConfig::_internal_set_tensorflowfrozen(const std::string& value) {
  if (!_internal_has_tensorflowfrozen()) {
    clear_weight();
    set_has_tensorflowfrozen();
    weight_.tensorflowfrozen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  weight_.tensorflowfrozen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ModelConfig::set_tensorflowfrozen(std::string&& value) {
  // @@protoc_insertion_point(field_set:ModelConfig.tensorflowFrozen)
  if (!_internal_has_tensorflowfrozen()) {
    clear_weight();
    set_has_tensorflowfrozen();
    weight_.tensorflowfrozen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  weight_.tensorflowfrozen_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ModelConfig.tensorflowFrozen)
}
inline void ModelConfig::set_tensorflowfrozen(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_tensorflowfrozen()) {
    clear_weight();
    set_has_tensorflowfrozen();
    weight_.tensorflowfrozen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  weight_.tensorflowfrozen_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ModelConfig.tensorflowFrozen)
}
inline void ModelConfig::set_tensorflowfrozen(const char* value,
                             size_t size) {
  if (!_internal_has_tensorflowfrozen()) {
    clear_weight();
    set_has_tensorflowfrozen();
    weight_.tensorflowfrozen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  weight_.tensorflowfrozen_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:ModelConfig.tensorflowFrozen)
}
inline std::string* ModelConfig::_internal_mutable_tensorflowfrozen() {
  if (!_internal_has_tensorflowfrozen()) {
    clear_weight();
    set_has_tensorflowfrozen();
    weight_.tensorflowfrozen_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return weight_.tensorflowfrozen_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ModelConfig::release_tensorflowfrozen() {
  // @@protoc_insertion_point(field_release:ModelConfig.tensorflowFrozen)
  if (_internal_has_tensorflowfrozen()) {
    clear_has_weight();
    return weight_.tensorflowfrozen_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void ModelConfig::set_allocated_tensorflowfrozen(std::string* tensorflowfrozen) {
  if (has_weight()) {
    clear_weight();
  }
  if (tensorflowfrozen != nullptr) {
    set_has_tensorflowfrozen();
    weight_.tensorflowfrozen_.UnsafeSetDefault(tensorflowfrozen);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(tensorflowfrozen);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:ModelConfig.tensorflowFrozen)
}

inline bool ModelConfig::has_config() const {
  return config_case() != CONFIG_NOT_SET;
}
inline void ModelConfig::clear_has_config() {
  _oneof_case_[0] = CONFIG_NOT_SET;
}
inline bool ModelConfig::has_weight() const {
  return weight_case() != WEIGHT_NOT_SET;
}
inline void ModelConfig::clear_has_weight() {
  _oneof_case_[1] = WEIGHT_NOT_SET;
}
inline ModelConfig::ConfigCase ModelConfig::config_case() const {
  return ModelConfig::ConfigCase(_oneof_case_[0]);
}
inline ModelConfig::WeightCase ModelConfig::weight_case() const {
  return ModelConfig::WeightCase(_oneof_case_[1]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_model_5fconfig_2eproto
